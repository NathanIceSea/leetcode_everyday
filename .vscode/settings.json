{
    "files.eol": "\n",
    "files.defaultLanguage": "cpp", // ctrl+N新建文件后默认的语言

    "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序）
    "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools插件文档
    "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉
    // 改变代码格式标准，全局设置中已经存在
    // "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: LLVM, IndentWidth: 4 }",
    // "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: WebKit, AllowShortIfStatementsOnASingleLine: true, IndentCaseLabels: true, ColumnLimit: 0, AccessModifierOffset: -4 }",
    "editor.formatOnType": true, // 输入时就进行格式化，默认触发字符较少，分号可以触发
    "editor.snippetSuggestions": "top", // snippets代码优先显示补全

    "clang.cflags": [ // 控制c语言静态检测的参数
        // Windows 下可以指明
        // "--target=x86_64-w64-mingw",
        "-std=c11",
        "-Wall"
    ],
    "clang.cxxflags": [ // 控制c++静态检测时的参数
        // "--target=x86_64-w64-mingw",
        "-std=c++17",
        "-Wall"
    ],

    "clang.completion.enable": true, // 效果稍好，但对性能要求高卡；开启的话需要下面 Disabled
    "C_Cpp.autocomplete": "Disabled",


    // Code Runner 在 build 中执行
    "code-runner.executorMap": {
        "c": "cd $dir && gcc -std=c11 -g '$fileName' -o '$workspaceRoot/build/$fileNameWithoutExt' && '$workspaceRoot/build/$fileNameWithoutExt'",
        "cpp": "cd $dir && g++ -std=c++17 -g '$fileName' -o '$workspaceRoot/build/$fileNameWithoutExt' && '$workspaceRoot/build/$fileNameWithoutExt'",
    },
    "files.associations": {
        "vector": "cpp"
    }
}
